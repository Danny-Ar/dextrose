var _this=this;var _url=require("url");var Client=require("./client");var express=require("express");var http=require("http");var socketio=require("socket.io");var SocketClient=require("socket.io-client");describe("Dextrose Client",function(){var app=void 0;var socketClient=void 0;var dextrose=void 0;var server=void 0;var io=void 0;beforeAll(function(){app=express();server=http.Server(app);io=socketio(server);});afterEach(function(){dextrose.disconnect();io.close();server.close();});it("can load a component",function(){return new Promise(function(resolve){io.on("connection",function(socket){socket.on("loadComponent",function(x){expect(x).toBe("component");io.emit("loaded");});});server.listen(0,function _callee(){var port;return regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:port=server.address().port;socketClient=SocketClient("http://localhost:"+port);dextrose=new Client(socketClient);expect(dextrose.loadComponent("component")).resolves.toBe("component-loaded").then(resolve);case 4:case"end":return _context.stop();}}},null,_this);});});});it("returns a list of components loaded in the app",function(){return new Promise(function(resolve){var componentList=['a','b','c'];io.on("connection",function(socket){socket.on("getAppComponents",function(){io.emit("bundled-components",componentList);});});server.listen(0,function _callee2(){var port;return regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:port=server.address().port;socketClient=SocketClient("http://localhost:"+port);dextrose=new Client(socketClient);expect(dextrose.getLoadedComponents()).resolves.toMatchObject(componentList).then(resolve);case 4:case"end":return _context2.stop();}}},null,_this);});});});});