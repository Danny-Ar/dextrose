var _this=this;var Client=require("./client");var express=require("express");var http=require("http");var socketio=require("socket.io");var SocketClient=require("socket.io-client");describe("Dextrose Client",function(){var app=void 0;var socketClient=void 0;var client=void 0;var server=void 0;var io=void 0;afterAll(function(){client.disconnect();io.close();server.close();});it("returns a list of components loaded in the app",function(){return new Promise(function(resolve){var componentList=['a','b','c'];app=express();server=http.Server(app);io=socketio(server);io.on("connection",function(socket){socket.on("getAppComponents",function(){io.emit("bundled-components",componentList);});});server.listen(0,function _callee(){var port,dextrose,returnedComponents;return regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:port=server.address().port;socketClient=SocketClient("http://localhost:"+port);dextrose=new Client(socketClient);_context.next=5;return regeneratorRuntime.awrap(dextrose.getLoadedComponents());case 5:returnedComponents=_context.sent;expect(returnedComponents).toMatchObject(componentList);resolve();case 8:case"end":return _context.stop();}}},null,_this);});});});});